
services:
  postgres: 
    image: postgres:15-alpine
    container_name: kaban_postgres-container
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes: 
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kaban_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  
  backend: 
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: production  # Default to production stage
    container_name: kaban_backend-container
    restart: unless-stopped
    environment: 
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      # Auth0
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_API_AUDIENCE: ${AUTH0_API_AUDIENCE}
      AUTH0_M2M_CLIENT_ID: ${AUTH0_M2M_CLIENT_ID}
      AUTH0_M2M_CLIENT_SECRET: ${AUTH0_M2M_CLIENT_SECRET}
      # Environment
      NODE_ENV: production
      ENVIRONMENT: production
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kaban_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s

  frontend: 
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: production  # Default to production stage
    container_name: kaban-frontend_container
    restart: unless-stopped
    environment: 
      # Auth0
      AUTH0_SECRET: ${AUTH0_SECRET}
      AUTH0_BASE_URL: ${AUTH0_BASE_URL}
      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_SCOPE: ${AUTH0_SCOPE}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      # App config
      APP_BASE_URL: ${APP_BASE_URL}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    ports: 
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on: 
      backend: 
        condition: service_healthy
    networks: 
      - kaban_network
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:

networks:
  kaban_network: 
    driver: bridge
    ipam:
      config: 
        - subnet: 172.20.0.0/16